<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt on Xizhi Zhu</title>
    <link>https://www.xizzhu.me/tags/qt/</link>
    <description>Recent content in Qt on Xizhi Zhu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://www.xizzhu.me/tags/qt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>D-Pointer / Private Implementation in Qt</title>
      <link>https://www.xizzhu.me/blog/2010-11-25-qt-private-impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.xizzhu.me/blog/2010-11-25-qt-private-impl/</guid>
      <description>&lt;p&gt;I believe many of you who just start reading the source code of Qt will have the question: why Qt uses those private classes? What&amp;rsquo;s the benefit of such a design pattern? Well, the most significant reason is to &lt;strong&gt;keep the binary compatibility&lt;/strong&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hybrid Application Using QML and Qt C&#43;&#43;</title>
      <link>https://www.xizzhu.me/blog/2010-10-28-hybrid-qml-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.xizzhu.me/blog/2010-10-28-hybrid-qml-qt/</guid>
      <description>&lt;p&gt;Though QML provides a nice way to design user interfaces, and JavaScript is employed there to implement the application logic and works pretty nice in many cases, we might still need Qt C++ in some situations (well, at least JavaScript has limited access outside its sandbox).
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>