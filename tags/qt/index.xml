<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>qt on Xizhi Zhu</title><link>https://xizzhu.me/tags/qt/</link><description>Recent content in qt on Xizhi Zhu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Nov 2010 00:00:00 -0800</lastBuildDate><atom:link href="https://xizzhu.me/tags/qt/index.xml" rel="self" type="application/rss+xml"/><item><title>D-Pointer / Private Implementation in Qt</title><link>https://xizzhu.me/post/2010-11-25-qt-private-impl/</link><pubDate>Thu, 25 Nov 2010 00:00:00 -0800</pubDate><guid>https://xizzhu.me/post/2010-11-25-qt-private-impl/</guid><description>&lt;p>I believe many of you who just start reading the source code of Qt will have the question: why Qt uses those private classes? What&amp;rsquo;s the benefit of such a design pattern? Well, the most significant reason is to &lt;strong>keep the binary compatibility&lt;/strong>.&lt;/p></description></item><item><title>Hybrid Application Using QML and Qt C++</title><link>https://xizzhu.me/post/2010-10-28-hybrid-qml-qt/</link><pubDate>Thu, 28 Oct 2010 00:00:00 -0700</pubDate><guid>https://xizzhu.me/post/2010-10-28-hybrid-qml-qt/</guid><description>&lt;p>Though QML provides a nice way to design user interfaces, and JavaScript is employed there to implement the application logic and works pretty nice in many cases, we might still need Qt C++ in some situations (well, at least JavaScript has limited access outside its sandbox).&lt;/p></description></item></channel></rss>