<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coroutine on xizzhu</title><link>https://xizzhu.me/tags/coroutine/</link><description>Recent content in coroutine on xizzhu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://xizzhu.me/tags/coroutine/index.xml" rel="self" type="application/rss+xml"/><item><title>limitedParallelism() doesn't limit concurrency</title><link>https://xizzhu.me/post/2023-11-10-kotlin-coroutine-concurrency/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2023-11-10-kotlin-coroutine-concurrency/</guid><description>&lt;p>In &lt;a href="https://blog.jetbrains.com/kotlin/2021/12/introducing-kotlinx-coroutines-1-6-0/">Coroutine 1.6.0&lt;/a>, &lt;code>limitedParallelism()&lt;/code> was &lt;a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/limited-parallelism.html">introduced&lt;/a> to provide a view of the underlying dispatcher, guaranteeing no more than the specified coroutines can be executed at the same time.&lt;/p></description></item><item><title>Cancelling coroutines is easy, right?</title><link>https://xizzhu.me/post/2023-05-02-kotlin-coroutine-cancellation-exception-suspend/</link><pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2023-05-02-kotlin-coroutine-cancellation-exception-suspend/</guid><description>&lt;p>With a well-designed support for &lt;a href="https://xizzhu.me/post/2019-05-24-kotlin-coroutine-structured-concurrency/">structured concurrency&lt;/a>, cancelling should be easy, and calling &lt;code>job.cancel()&lt;/code> will do the trick, right?&lt;/p></description></item><item><title>Kotlin Coroutines: Flows</title><link>https://xizzhu.me/post/2019-12-09-kotlin-coroutine-flow/</link><pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2019-12-09-kotlin-coroutine-flow/</guid><description>&lt;p>&lt;a href="https://xizzhu.me/post/2019-05-23-kotlin-coroutine">Kotlin Coroutines&lt;/a> enables us to asynchronously return a single value, but how about multiple values?&lt;/p></description></item><item><title>Kotlin Coroutines: Structured Concurrency</title><link>https://xizzhu.me/post/2019-05-24-kotlin-coroutine-structured-concurrency/</link><pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2019-05-24-kotlin-coroutine-structured-concurrency/</guid><description>&lt;p>In the previous &lt;a href="https://xizzhu.me/post/2019-05-23-kotlin-coroutine">article&lt;/a>, we discussed the basics on how to Kotlin Coroutines. Now, let&amp;rsquo;s continue to the topic of &lt;strong>structured concurrency&lt;/strong>.&lt;/p></description></item><item><title>Kotlin Coroutines: The Basics</title><link>https://xizzhu.me/post/2019-05-23-kotlin-coroutine/</link><pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2019-05-23-kotlin-coroutine/</guid><description>&lt;p>Starting with the &lt;a href="https://kotlinlang.org/docs/reference/whatsnew13.html">1.3&lt;/a> release, Kotlin provides a nice and flexible way to do asynchronous or non-blocking programming: &lt;a href="https://kotlinlang.org/docs/reference/coroutines-overview.html">Coroutines&lt;/a>.&lt;/p></description></item></channel></rss>