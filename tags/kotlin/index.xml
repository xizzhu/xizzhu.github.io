<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kotlin on xizzhu</title><link>https://xizzhu.me/tags/kotlin/</link><description>Recent content in kotlin on xizzhu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xizzhu.me/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started with Kotlin Multiplaform Mobile (KMM)</title><link>https://xizzhu.me/post/2021-06-28-kotlin-multiplatform-mobile-kmm/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2021-06-28-kotlin-multiplatform-mobile-kmm/</guid><description>&lt;p>&lt;a href="https://kotlinlang.org/docs/mobile/home.html">Kotlin Multiplatform Mobile (KMM)&lt;/a> is a cross-platform framework to share code for Android and iOS apps.&lt;/p></description></item><item><title>Model-View-Intent Design Pattern on Android</title><link>https://xizzhu.me/post/2021-06-21-android-mvi-kotlin-coroutines-flow-compose/</link><pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2021-06-21-android-mvi-kotlin-coroutines-flow-compose/</guid><description>&lt;p>Model-View-Intent (MVI) is one of the latest design patterns for Android, which relies heavily on reactive and &lt;a href="https://xizzhu.me/post/2021-02-17-programming-paradigms-structured-object-oriented-functional/">functional programming&lt;/a>.&lt;/p></description></item><item><title>Understanding Generics in Kotlin</title><link>https://xizzhu.me/post/2020-06-06-kotlin-generics/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-06-06-kotlin-generics/</guid><description>&lt;p>&lt;a href="https://kotlinlang.org/docs/reference/generics.html">Generics&lt;/a> is a powerful tool, but it often seems confusing. In this article, we&amp;rsquo;ll try to explain how to use it in Kotlin.&lt;/p></description></item><item><title>Design Patterns in Kotlin: Behavioral Patterns</title><link>https://xizzhu.me/post/2020-05-02-design-patterns-kotlin-behavioral-patterns/</link><pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-05-02-design-patterns-kotlin-behavioral-patterns/</guid><description>&lt;p>Gang of Four&amp;rsquo;s Behavioral Patterns describe the way of &lt;strong>communications between objects&lt;/strong>.&lt;/p></description></item><item><title>Design Patterns in Kotlin: Structural Patterns</title><link>https://xizzhu.me/post/2020-04-27-design-patterns-kotlin-structural-patterns/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-27-design-patterns-kotlin-structural-patterns/</guid><description>&lt;p>Gang of Four&amp;rsquo;s Structural Patterns describe the way of &lt;strong>composing classes and objects to form larger structures&lt;/strong>.&lt;/p></description></item><item><title>Design Patterns in Kotlin: Creational Patterns</title><link>https://xizzhu.me/post/2020-04-25-design-patterns-kotlin-creational-patterns/</link><pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-25-design-patterns-kotlin-creational-patterns/</guid><description>&lt;p>Gang of Four&amp;rsquo;s Creational Patterns describe the way of &lt;strong>creating and initializing objects&lt;/strong>.&lt;/p></description></item><item><title>Effective Kotlin: Serialization</title><link>https://xizzhu.me/post/2020-04-24-effective-kotlin-serialization/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-24-effective-kotlin-serialization/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is Serialization.&lt;/p></description></item><item><title>Effective Kotlin: Concurrency</title><link>https://xizzhu.me/post/2020-04-23-effective-kotlin-concurrency/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-23-effective-kotlin-concurrency/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is Concurrency.&lt;/p></description></item><item><title>Effective Kotlin: Exceptions</title><link>https://xizzhu.me/post/2020-04-22-effective-kotlin-exceptions/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-22-effective-kotlin-exceptions/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is Exceptions.&lt;/p></description></item><item><title>Effective Kotlin: General Programming</title><link>https://xizzhu.me/post/2020-04-20-effective-kotlin-general-programming/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-20-effective-kotlin-general-programming/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is General Programming.&lt;/p></description></item><item><title>Effective Kotlin: Methods</title><link>https://xizzhu.me/post/2020-04-16-effective-kotlin-methods/</link><pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-16-effective-kotlin-methods/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is Methods.&lt;/p></description></item><item><title>Effective Kotlin: Lambdas and Streams</title><link>https://xizzhu.me/post/2020-04-15-effective-kotlin-lambdas-streams/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-15-effective-kotlin-lambdas-streams/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is Lambdas and Streams.&lt;/p></description></item><item><title>Effective Kotlin: Enums and Annotations</title><link>https://xizzhu.me/post/2020-04-13-effective-kotlin-enums-annotations/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-13-effective-kotlin-enums-annotations/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is Enums and Annotations.&lt;/p></description></item><item><title>Effective Kotlin: Generics</title><link>https://xizzhu.me/post/2020-04-10-effective-kotlin-generics/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-10-effective-kotlin-generics/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is Generics.&lt;/p></description></item><item><title>Effective Kotlin: Classes and Interfaces</title><link>https://xizzhu.me/post/2020-04-07-effective-kotlin-classes-interfaces/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-07-effective-kotlin-classes-interfaces/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is Classes and Interfaces.&lt;/p></description></item><item><title>Effective Kotlin: Methods Common to All Objects</title><link>https://xizzhu.me/post/2020-04-05-effective-kotlin-methods-common-all-objects/</link><pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-05-effective-kotlin-methods-common-all-objects/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world. Today&amp;rsquo;s topic is Methods Common to All Objects.&lt;/p></description></item><item><title>Effective Kotlin: Creating and Destroying Objects</title><link>https://xizzhu.me/post/2020-04-03-effective-kotlin-create-destroy-object/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2020-04-03-effective-kotlin-create-destroy-object/</guid><description>&lt;p>Let&amp;rsquo;s see how we can apply Joshua Bloch&amp;rsquo;s &lt;a href="https://www.amazon.com/gp/product/0134685997/">Effective Java&lt;/a> in the Kotlin world, starting with Creating and Destroying Objects.&lt;/p></description></item><item><title>Kotlin Coroutines: Flows</title><link>https://xizzhu.me/post/2019-12-09-kotlin-coroutine-flow/</link><pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2019-12-09-kotlin-coroutine-flow/</guid><description>&lt;p>&lt;a href="https://xizzhu.me/post/2019-05-23-kotlin-coroutine">Kotlin Coroutines&lt;/a> enables us to asynchronously return a single value, but how about multiple values?&lt;/p></description></item><item><title>Kotlin Coroutines: Structured Concurrency</title><link>https://xizzhu.me/post/2019-05-24-kotlin-coroutine-structured-concurrency/</link><pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2019-05-24-kotlin-coroutine-structured-concurrency/</guid><description>&lt;p>In the previous &lt;a href="https://xizzhu.me/post/2019-05-23-kotlin-coroutine">article&lt;/a>, we discussed the basics on how to Kotlin Coroutines. Now, let&amp;rsquo;s continue to the topic of &lt;strong>structured concurrency&lt;/strong>.&lt;/p></description></item><item><title>Kotlin Coroutines: The Basics</title><link>https://xizzhu.me/post/2019-05-23-kotlin-coroutine/</link><pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2019-05-23-kotlin-coroutine/</guid><description>&lt;p>Starting with the &lt;a href="https://kotlinlang.org/docs/reference/whatsnew13.html">1.3&lt;/a> release, Kotlin provides a nice and flexible way to do asynchronous or non-blocking programming: &lt;a href="https://kotlinlang.org/docs/reference/coroutines-overview.html">Coroutines&lt;/a>.&lt;/p></description></item><item><title>Kotlin Standard Functions: apply, also, let, with, and run</title><link>https://xizzhu.me/post/2019-04-03-kotlin-standard-functions-let-apply-also-run-with/</link><pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate><guid>https://xizzhu.me/post/2019-04-03-kotlin-standard-functions-let-apply-also-run-with/</guid><description>&lt;p>Kotlin has provided several powerful functions in &lt;a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt">Standard.kt&lt;/a>. Let&amp;rsquo;s go through them here quickly.&lt;/p></description></item></channel></rss>